name: Push To Yandex Cloud CR

# Controls when the action will run. 
on:
  push:
    branches:
      - TM09-105-deploy-to-yandex-cloud

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  build:

    runs-on: ubuntu-latest

    steps:

        - uses: actions/checkout@v2

        - name: 'Create env file'
          run: |
            echo "${{ secrets.ENV_FILE }}" > .env

          env:
            CR_REPOSITORY: traffic-racer
            CR_REGISTRY: ${{env.CR_REGISTRY}}
            IMAGE_TAG: ${{ github.sha }}
            NGINX_IMAGE: cr.yandex/$CR_REGISTRY/$CR_REPOSITORY/nginx:${{ github.sha }}
            SERVER_IMAGE: cr.yandex/$CR_REGISTRY/$CR_REPOSITORY/server:${{ github.sha }}
            DB_IMAGE: cr.yandex/$CR_REGISTRY/$CR_REPOSITORY/db:${{ github.sha }}

        - name: Yandex Cloud CR "Login" Action for GitHub Actions
          uses: yc-actions/yc-cr-login@v0.1-alpha
          with:
            yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

        - name: Build nginx
          uses: docker/build-push-action@v3
          with:
            context: .
            file: ./Dockerfile.server
            
        - name: Push nginx
          run: docker push ${{env.NGINX_IMAGE}}

        - name: Build server
          uses: docker/build-push-action@v3
          with:
            context: .
            file: ./Dockerfile.server
        
        - name: Push server
          run: docker push ${{env.SERVER_IMAGE}}

        - name: Build db
          uses: docker/build-push-action@v3
          with:
            context: .
            file: ./Dockerfile.db
            
        - name: Push db
          run: docker push ${{env.DB_IMAGE}}

  deploy:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Deploy COI VM
        id: deploy-coi
        uses: yc-actions/yc-coi-deploy@v1
        
        env:
          NGINX_IMAGE: ${{env.NGINX_IMAGE}}
          SERVER_IMAGE: ${{env.SERVER_IMAGE}}
          DB_IMAGE: ${{env.DB_IMAGE}}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          YC_SA_JSON_CREDENTIALS: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          FOLDER_ID: ${{ env.FOLDER_ID }}
          VM_NAME: ${{env.VM_NAME}}
          VM_SERVICE_ACCOUNT_ID: ${{env.VM_SERVICE_ACCOUNT_ID}}
          VM_SUNNET_ID: ${{env.VM_SUNNET_ID}}
        
        with:
          yc-sa-json-credentials: $YC_SA_JSON_CREDENTIALS
          folder-id: $FOLDER_ID
          vm-name: $VM_NAME
          vm-service-account-id: $VM_SERVICE_ACCOUNT_ID
          vm-cores: 2
          vm-memory: 2 GB
          vm-disk-size: 8GB
          vm-disk-type: SSD
          vm-subnet-id: $VM_SUNNET_ID
          vm-zone-id: ru-central1-b
          vm-core-fraction: 20
          user-data-path: './user-data.yaml'
          docker-compose-path: './docker-compose.yaml'
